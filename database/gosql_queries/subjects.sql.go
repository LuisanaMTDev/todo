// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: subjects.sql

package gosql_queries

import (
	"context"
)

const addSubject = `-- name: AddSubject :exec
INSERT INTO subjects (
	id, name
) VALUES ( ?, ? )
`

type AddSubjectParams struct {
	ID   string
	Name string
}

func (q *Queries) AddSubject(ctx context.Context, arg AddSubjectParams) error {
	_, err := q.db.ExecContext(ctx, addSubject, arg.ID, arg.Name)
	return err
}

const deleteSubject = `-- name: DeleteSubject :execrows
DELETE FROM subjects WHERE id = ?
`

func (q *Queries) DeleteSubject(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSubject, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllSubjects = `-- name: GetAllSubjects :many
SELECT id, name, created_at, updated_at FROM subjects
`

func (q *Queries) GetAllSubjects(ctx context.Context) ([]Subject, error) {
	rows, err := q.db.QueryContext(ctx, getAllSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastSubjectId = `-- name: GetLastSubjectId :one
SELECT id FROM subjects
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastSubjectId(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getLastSubjectId)
	var id string
	err := row.Scan(&id)
	return id, err
}

const modifySubjectName = `-- name: ModifySubjectName :execrows
UPDATE subjects SET
name = ?,
updated_at = datetime('now', 'localtime')
WHERE id = ?
`

type ModifySubjectNameParams struct {
	Name string
	ID   string
}

func (q *Queries) ModifySubjectName(ctx context.Context, arg ModifySubjectNameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, modifySubjectName, arg.Name, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
