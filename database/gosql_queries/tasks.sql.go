// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package gosql_queries

import (
	"context"

	"github.com/lib/pq"
)

const addTag = `-- name: AddTag :exec
UPDATE tasks
SET tags = array_append(tags, $2)
WHERE id = $1
`

type AddTagParams struct {
	ID          string
	ArrayAppend interface{}
}

func (q *Queries) AddTag(ctx context.Context, arg AddTagParams) error {
	_, err := q.db.ExecContext(ctx, addTag, arg.ID, arg.ArrayAppend)
	return err
}

const addTask = `-- name: AddTask :exec
INSERT INTO tasks (
	id, description, due_date, state, tags, subject_id
) VALUES ( $1, $2, TO_TIMESTAMP($3, 'YYYY-MM-DD"T"HH24:MI'), $4, $5, $6 )
`

type AddTaskParams struct {
	ID          string
	Description string
	ToTimestamp string
	State       string
	Tags        []string
	SubjectID   string
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) error {
	_, err := q.db.ExecContext(ctx, addTask,
		arg.ID,
		arg.Description,
		arg.ToTimestamp,
		arg.State,
		pq.Array(arg.Tags),
		arg.SubjectID,
	)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
UPDATE tasks
SET tags = array_remove(tags, $2)
WHERE id = $1
`

type DeleteTagParams struct {
	ID          string
	ArrayRemove interface{}
}

func (q *Queries) DeleteTag(ctx context.Context, arg DeleteTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteTag, arg.ID, arg.ArrayRemove)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getAllTasksBySubject = `-- name: GetAllTasksBySubject :many
SELECT id, description, state, due_date, subject_id, tags, created_at, updated_at FROM tasks
WHERE subject_id = $1
`

func (q *Queries) GetAllTasksBySubject(ctx context.Context, subjectID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasksBySubject, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.State,
			&i.DueDate,
			&i.SubjectID,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastTaskID = `-- name: GetLastTaskID :one
SELECT id FROM tasks
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastTaskID(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getLastTaskID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const modifyTaskDescription = `-- name: ModifyTaskDescription :execrows
UPDATE tasks SET
description = $2,
updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type ModifyTaskDescriptionParams struct {
	ID          string
	Description string
}

func (q *Queries) ModifyTaskDescription(ctx context.Context, arg ModifyTaskDescriptionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, modifyTaskDescription, arg.ID, arg.Description)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const modifyTaskDueDate = `-- name: ModifyTaskDueDate :execrows
UPDATE tasks SET
due_date = TO_TIMESTAMP($2, 'YYYY-MM-DD"T"HH24:MI'),
updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type ModifyTaskDueDateParams struct {
	ID          string
	ToTimestamp string
}

func (q *Queries) ModifyTaskDueDate(ctx context.Context, arg ModifyTaskDueDateParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, modifyTaskDueDate, arg.ID, arg.ToTimestamp)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const modifyTaskState = `-- name: ModifyTaskState :execrows
UPDATE tasks SET
state = $2,
updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type ModifyTaskStateParams struct {
	ID    string
	State string
}

func (q *Queries) ModifyTaskState(ctx context.Context, arg ModifyTaskStateParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, modifyTaskState, arg.ID, arg.State)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
